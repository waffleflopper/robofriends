{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ScrollBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Tile","styled","section","_templateObject","Card","_ref","name","email","id","username","react_default","a","createElement","alt","src","concat","Section","CardList_templateObject","CardList","robots","cardComponent","map","user","i","components_Card","key","Input","input","SearchBox_templateObject","SearchBox","searchField","searchChange","type","placeholder","onChange","ScrollBox","ScrollBox_templateObject","props","width","height","Title","h1","App_templateObject","SearchSection","_templateObject2","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","evt","setState","target","value","catchEmpty","filteredRobots","length","push","state","_this2","fetch","then","response","json","users","_this$state","filter","robot","toLowerCase","includes","className","components_SearchBox","components_ScrollBox","components_CardList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2183febe.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Tile = styled.section`\n    text-align: center;\n    display: inline-block;\n    border-radius: .5em;\n    border-width: .25rem;\n    padding: 3em;\n    margin: 1em;\t\n\n    -moz-osx-font-smoothing:grayscale\n    backface-visibility:hidden\n    \n    transition: transform 0.25s ease\n\n    :hover, :focus {\n        transform: scale(1.05)\n    }\n    :active {\n        transform: scale(0.9);\n    }\n\n    box-shadow: 4px 4px 8px 0px rgba( 0, 0, 0, 0.2 );\n    cursor: pointer;\n    background: rgba(255, 215, 170, .5);\n    z-index: 0;\n`\n\n//const Card = (props) => {\nconst Card = ({name, email, id, username}) => {  //destructuring from within\n    return (\n        <Tile>\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{username}</p>\n                <p>{email}</p>\n            </div>\n        </Tile>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport styled from 'styled-components';\n\nconst Section = styled.section`\n    text-align: center;\n`\n\nconst CardList = ({robots}) =>  {\n    \n    const cardComponent = robots.map((user,i) => {\n        return (<Card \n        key={i} \n        id={robots[i].id} \n        name={robots[i].name} \n        username={robots[i].username} \n        email={robots[i].email}\n        />);\n    });\n\n    return (\n        <Section>\n            {cardComponent}\n        </Section>\n    );\n}\n\nexport default CardList;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n    padding: 1em;\n    border: solid 1px rgb(128, 42, 21);\n    background: rgba(255, 215, 170, 0.6);\n    font-size: 1.25em;\n`\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n            <Input type=\"search\" \n                placeholder=\"Search robots...\" \n                onChange={searchChange}\n                />\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport styled from 'styled-components';\n\nconst ScrollBox = styled.section`\n    padding: 1em;\n    overflow-y: scroll;\n    position: fixed;\n    bottom: 10px;\n    top: 230px;\n    width: ${props => props.width || \"500px\"};\n    height: ${props => props.height || \"500px\"};\n    z-index: 0;\n`\n\n/* const ScrollBox = (props) => {\n    //return props.children;  //how to return everything between the two <Scroll> tags\n\n    return (\n\n        <div className=\"scrollBox\" style={{height: props.height}}>\n            {props.children}\n        </div>\n\n    );\n} */\n\nexport default ScrollBox;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport ScrollBox from '../components/ScrollBox';\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n    color: #000;\n    text-weight: bold;\n    font-size: 6em;\n    display: block;\n    text-align: center;\n    margin-top: .2em;\n    margin-bottom: .3em;\n`\n\nconst SearchSection = styled.section`\n    text-align: center;\n    padding-bottom: 1em;\n`\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField: '',\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users') //get the file\n        .then(response => response.json()) // convert it with json magic\n        .then(users => this.setState({ robots: users})) // set it as our robots array\n    }\n\n    onSearchChange = (evt) => {\n        this.setState({searchField: evt.target.value });\n        //console.log(filteredRobots);\n    }\n\n    catchEmpty = (filteredRobots) => {\n        if (!filteredRobots.length) {\n            filteredRobots.push({\n                id: 99999999,\n                name: \"Oh Nos!\",\n                username: \"There were no results\",\n                email: \"Try Searching Again :(\",\n            });\n        };\n    }\n \n    render() {\n        const { robots, searchField } = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n        this.catchEmpty(filteredRobots);\n\n        return (\n            <div className=\"top\">\n                <Title>RoboFriends</Title>\n                <SearchSection>\n                    <SearchBox searchChange={this.onSearchChange} searchField={searchField}/>\n                </SearchSection>\n                    \n            <ScrollBox height=\"80%\" width=\"100%\">\n                <CardList robots={filteredRobots}/>\n            </ScrollBox>\n            </div>\n        );\n    } \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>\n                    \n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}